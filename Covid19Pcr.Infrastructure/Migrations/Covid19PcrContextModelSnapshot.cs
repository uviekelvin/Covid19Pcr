// <auto-generated />
using System;
using Covid19Pcr.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Covid19Pcr.Infrastructure.Migrations
{
    [DbContext(typeof(Covid19PcrContext))]
    partial class Covid19PcrContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Covid19Pcr.Domain.Models.Bookings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BookingCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long>("TestDayId")
                        .HasColumnType("bigint");

                    b.Property<long>("TestTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BookingCode")
                        .IsUnique()
                        .HasFilter("[BookingCode] IS NOT NULL");

                    b.HasIndex("PatientId");

                    b.HasIndex("TestDayId");

                    b.HasIndex("TestTypeId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BookingCode = "0649346476",
                            DateCreated = new DateTime(2021, 11, 2, 23, 19, 1, 422, DateTimeKind.Local).AddTicks(7973),
                            DateUpdated = new DateTime(2021, 11, 2, 23, 19, 1, 424, DateTimeKind.Local).AddTicks(3313),
                            IsDeleted = false,
                            PatientId = 1L,
                            Status = "0",
                            TestDayId = 1L,
                            TestTypeId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            BookingCode = "7766935364",
                            DateCreated = new DateTime(2021, 11, 2, 23, 19, 1, 447, DateTimeKind.Local).AddTicks(2550),
                            DateUpdated = new DateTime(2021, 11, 2, 23, 19, 1, 447, DateTimeKind.Local).AddTicks(2582),
                            IsDeleted = false,
                            PatientId = 2L,
                            Status = "0",
                            TestDayId = 2L,
                            TestTypeId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            BookingCode = "4436818880",
                            DateCreated = new DateTime(2021, 11, 2, 23, 19, 1, 447, DateTimeKind.Local).AddTicks(3624),
                            DateUpdated = new DateTime(2021, 11, 2, 23, 19, 1, 447, DateTimeKind.Local).AddTicks(3629),
                            IsDeleted = false,
                            PatientId = 2L,
                            Status = "0",
                            TestDayId = 2L,
                            TestTypeId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            BookingCode = "9121366194",
                            DateCreated = new DateTime(2021, 11, 2, 23, 19, 1, 447, DateTimeKind.Local).AddTicks(3668),
                            DateUpdated = new DateTime(2021, 11, 2, 23, 19, 1, 447, DateTimeKind.Local).AddTicks(3671),
                            IsDeleted = false,
                            PatientId = 3L,
                            Status = "0",
                            TestDayId = 3L,
                            TestTypeId = 1L
                        });
                });

            modelBuilder.Entity("Covid19Pcr.Domain.Models.Labs", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Labs");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateCreated = new DateTime(2021, 11, 2, 23, 19, 1, 453, DateTimeKind.Local).AddTicks(3187),
                            DateUpdated = new DateTime(2021, 11, 2, 23, 19, 1, 453, DateTimeKind.Local).AddTicks(3213),
                            IsDeleted = false,
                            LocationId = 1L,
                            Name = "Malens Diagnostic Solutions"
                        },
                        new
                        {
                            Id = 2L,
                            DateCreated = new DateTime(2021, 11, 2, 23, 19, 1, 453, DateTimeKind.Local).AddTicks(4730),
                            DateUpdated = new DateTime(2021, 11, 2, 23, 19, 1, 453, DateTimeKind.Local).AddTicks(4740),
                            IsDeleted = false,
                            LocationId = 1L,
                            Name = "African Biosciences Ltd"
                        },
                        new
                        {
                            Id = 3L,
                            DateCreated = new DateTime(2021, 11, 2, 23, 19, 1, 453, DateTimeKind.Local).AddTicks(4747),
                            DateUpdated = new DateTime(2021, 11, 2, 23, 19, 1, 453, DateTimeKind.Local).AddTicks(4749),
                            IsDeleted = false,
                            LocationId = 1L,
                            Name = "Ice Field Industrial Ltd"
                        },
                        new
                        {
                            Id = 4L,
                            DateCreated = new DateTime(2021, 11, 2, 23, 19, 1, 453, DateTimeKind.Local).AddTicks(4753),
                            DateUpdated = new DateTime(2021, 11, 2, 23, 19, 1, 453, DateTimeKind.Local).AddTicks(4755),
                            IsDeleted = false,
                            LocationId = 1L,
                            Name = "PathCare Laboratories"
                        },
                        new
                        {
                            Id = 5L,
                            DateCreated = new DateTime(2021, 11, 2, 23, 19, 1, 453, DateTimeKind.Local).AddTicks(4762),
                            DateUpdated = new DateTime(2021, 11, 2, 23, 19, 1, 453, DateTimeKind.Local).AddTicks(4764),
                            IsDeleted = false,
                            LocationId = 1L,
                            Name = "Argon Laboratories Ltd"
                        },
                        new
                        {
                            Id = 6L,
                            DateCreated = new DateTime(2021, 11, 2, 23, 19, 1, 453, DateTimeKind.Local).AddTicks(4892),
                            DateUpdated = new DateTime(2021, 11, 2, 23, 19, 1, 453, DateTimeKind.Local).AddTicks(4896),
                            IsDeleted = false,
                            LocationId = 2L,
                            Name = "Azzon Medicals and Diagnostics"
                        },
                        new
                        {
                            Id = 7L,
                            DateCreated = new DateTime(2021, 11, 2, 23, 19, 1, 453, DateTimeKind.Local).AddTicks(4900),
                            DateUpdated = new DateTime(2021, 11, 2, 23, 19, 1, 453, DateTimeKind.Local).AddTicks(4902),
                            IsDeleted = false,
                            LocationId = 2L,
                            Name = "CrownChek Laboratories Ltd"
                        },
                        new
                        {
                            Id = 8L,
                            DateCreated = new DateTime(2021, 11, 2, 23, 19, 1, 453, DateTimeKind.Local).AddTicks(4905),
                            DateUpdated = new DateTime(2021, 11, 2, 23, 19, 1, 453, DateTimeKind.Local).AddTicks(4907),
                            IsDeleted = false,
                            LocationId = 2L,
                            Name = "Europharm Laboratories"
                        },
                        new
                        {
                            Id = 9L,
                            DateCreated = new DateTime(2021, 11, 2, 23, 19, 1, 453, DateTimeKind.Local).AddTicks(4911),
                            DateUpdated = new DateTime(2021, 11, 2, 23, 19, 1, 453, DateTimeKind.Local).AddTicks(4913),
                            IsDeleted = false,
                            LocationId = 2L,
                            Name = "Nero Medical Diagnostic Laboratory"
                        });
                });

            modelBuilder.Entity("Covid19Pcr.Domain.Models.Locations", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateCreated = new DateTime(2021, 11, 2, 23, 19, 1, 454, DateTimeKind.Local).AddTicks(9625),
                            DateUpdated = new DateTime(2021, 11, 2, 23, 19, 1, 454, DateTimeKind.Local).AddTicks(9655),
                            IsDeleted = false,
                            Name = "Lagos"
                        },
                        new
                        {
                            Id = 2L,
                            DateCreated = new DateTime(2021, 11, 2, 23, 19, 1, 455, DateTimeKind.Local).AddTicks(410),
                            DateUpdated = new DateTime(2021, 11, 2, 23, 19, 1, 455, DateTimeKind.Local).AddTicks(418),
                            IsDeleted = false,
                            Name = "Abuja"
                        });
                });

            modelBuilder.Entity("Covid19Pcr.Domain.Models.Patients", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("SurName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email", "PhoneNumber");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateCreated = new DateTime(2021, 11, 2, 23, 19, 1, 465, DateTimeKind.Local).AddTicks(6170),
                            DateUpdated = new DateTime(2021, 11, 2, 23, 19, 1, 465, DateTimeKind.Local).AddTicks(6197),
                            Email = "uviekelvin@gmail.com",
                            FirstName = "Uvie",
                            IsDeleted = false,
                            PhoneNumber = "+2347059647234",
                            SurName = "Oghenejakpor"
                        },
                        new
                        {
                            Id = 2L,
                            DateCreated = new DateTime(2021, 11, 2, 23, 19, 1, 465, DateTimeKind.Local).AddTicks(8775),
                            DateUpdated = new DateTime(2021, 11, 2, 23, 19, 1, 465, DateTimeKind.Local).AddTicks(8787),
                            Email = "kelvin.uvie@gmail.com",
                            FirstName = "Kelvin",
                            IsDeleted = false,
                            PhoneNumber = "+2347030650790",
                            SurName = "Oghenejakpor"
                        },
                        new
                        {
                            Id = 3L,
                            DateCreated = new DateTime(2021, 11, 2, 23, 19, 1, 465, DateTimeKind.Local).AddTicks(8794),
                            DateUpdated = new DateTime(2021, 11, 2, 23, 19, 1, 465, DateTimeKind.Local).AddTicks(8796),
                            Email = "uviekelvin@gmail.com",
                            FirstName = "Odafe",
                            IsDeleted = false,
                            PhoneNumber = "+2347059647234",
                            SurName = "Oghenejakpor"
                        });
                });

            modelBuilder.Entity("Covid19Pcr.Domain.Models.TestDays", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LabId")
                        .HasColumnType("bigint");

                    b.Property<int>("SpaceAvailable")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LabId");

                    b.ToTable("TestDays");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Date = new DateTime(2021, 11, 3, 23, 19, 1, 466, DateTimeKind.Local).AddTicks(7880),
                            DateCreated = new DateTime(2021, 11, 2, 23, 19, 1, 466, DateTimeKind.Local).AddTicks(7858),
                            DateUpdated = new DateTime(2021, 11, 2, 23, 19, 1, 466, DateTimeKind.Local).AddTicks(7875),
                            IsDeleted = false,
                            LabId = 1L,
                            SpaceAvailable = 0
                        },
                        new
                        {
                            Id = 2L,
                            Date = new DateTime(2021, 11, 4, 23, 19, 1, 466, DateTimeKind.Local).AddTicks(9442),
                            DateCreated = new DateTime(2021, 11, 2, 23, 19, 1, 466, DateTimeKind.Local).AddTicks(9427),
                            DateUpdated = new DateTime(2021, 11, 2, 23, 19, 1, 466, DateTimeKind.Local).AddTicks(9436),
                            IsDeleted = false,
                            LabId = 2L,
                            SpaceAvailable = 0
                        },
                        new
                        {
                            Id = 3L,
                            Date = new DateTime(2021, 11, 5, 23, 19, 1, 466, DateTimeKind.Local).AddTicks(9465),
                            DateCreated = new DateTime(2021, 11, 2, 23, 19, 1, 466, DateTimeKind.Local).AddTicks(9461),
                            DateUpdated = new DateTime(2021, 11, 2, 23, 19, 1, 466, DateTimeKind.Local).AddTicks(9463),
                            IsDeleted = false,
                            LabId = 3L,
                            SpaceAvailable = 0
                        },
                        new
                        {
                            Id = 4L,
                            Date = new DateTime(2021, 11, 6, 23, 19, 1, 466, DateTimeKind.Local).AddTicks(9472),
                            DateCreated = new DateTime(2021, 11, 2, 23, 19, 1, 466, DateTimeKind.Local).AddTicks(9468),
                            DateUpdated = new DateTime(2021, 11, 2, 23, 19, 1, 466, DateTimeKind.Local).AddTicks(9470),
                            IsDeleted = false,
                            LabId = 3L,
                            SpaceAvailable = 0
                        });
                });

            modelBuilder.Entity("Covid19Pcr.Domain.Models.TestTypes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TestTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateCreated = new DateTime(2021, 11, 2, 23, 19, 1, 468, DateTimeKind.Local).AddTicks(2169),
                            DateUpdated = new DateTime(2021, 11, 2, 23, 19, 1, 468, DateTimeKind.Local).AddTicks(2196),
                            IsDeleted = false,
                            Name = "PCR Tests"
                        });
                });

            modelBuilder.Entity("Covid19Pcr.Domain.Models.Bookings", b =>
                {
                    b.HasOne("Covid19Pcr.Domain.Models.Patients", "Patient")
                        .WithMany("Bookings")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Covid19Pcr.Domain.Models.TestDays", "TestDay")
                        .WithMany()
                        .HasForeignKey("TestDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Covid19Pcr.Domain.Models.TestTypes", "TestType")
                        .WithMany()
                        .HasForeignKey("TestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Covid19Pcr.Domain.Models.TestResults", "TestResult", b1 =>
                        {
                            b1.Property<long>("BookingId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Remarks")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("ResultType")
                                .HasColumnType("int");

                            b1.HasKey("BookingId");

                            b1.ToTable("TestResults");

                            b1.WithOwner("Booking")
                                .HasForeignKey("BookingId");

                            b1.Navigation("Booking");
                        });

                    b.Navigation("Patient");

                    b.Navigation("TestDay");

                    b.Navigation("TestResult");

                    b.Navigation("TestType");
                });

            modelBuilder.Entity("Covid19Pcr.Domain.Models.Labs", b =>
                {
                    b.HasOne("Covid19Pcr.Domain.Models.Locations", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Covid19Pcr.Domain.Models.TestDays", b =>
                {
                    b.HasOne("Covid19Pcr.Domain.Models.Labs", "Lab")
                        .WithMany("TestDays")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lab");
                });

            modelBuilder.Entity("Covid19Pcr.Domain.Models.Labs", b =>
                {
                    b.Navigation("TestDays");
                });

            modelBuilder.Entity("Covid19Pcr.Domain.Models.Patients", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
